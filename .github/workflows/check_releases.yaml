name: Check for new releases

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for update
        id: check
        run: |
          set -euo pipefail
          CURRENT_HASH=$(cat .digest)
          REMOTE_HASH=$(curl -fSsL https://jagex.akamaized.net/direct6/launcher-win/alias.json | jq -r '.["launcher-win.production"]')
          if [ "$CURRENT_HASH" != "$REMOTE_HASH" ]; then
            echo "New release found!"
            echo -n "$REMOTE_HASH" > .digest
            echo "hash=$REMOTE_HASH" >> $GITHUB_OUTPUT
            echo 'new_release=true' >> $GITHUB_OUTPUT
          else
            echo "No new release found."
            echo 'new_release=false' >> $GITHUB_OUTPUT
          fi

      - name: Setup Python
        if: steps.check.outputs.new_release == 'true' && steps.check.outputs.hash != ''
        uses: actions/setup-python@v5
        with:
          cache: pip

      - name: Install dependencies
        if: steps.check.outputs.new_release == 'true' && steps.check.outputs.hash != ''
        run: pip install -r requirements.txt

      - name: Generate release
        if: steps.check.outputs.new_release == 'true' && steps.check.outputs.hash != ''
        id: generate
        env:
          HASH: ${{ steps.check.outputs.hash }}
        run: |
          set -euo pipefail
          PREVPWD=$(pwd)
          TMPDIR=$(mktemp -d)
          cd $TMPDIR
          python $PREVPWD/installer.py --hash $HASH -v
          cd $PREVPWD
          echo "version=$(cat $TMPDIR/.version)" >> $GITHUB_OUTPUT
          rm -rf $TMPDIR

      - name: Setup GPG
        if: steps.check.outputs.new_release == 'true' && steps.check.outputs.hash != ''
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Save changes to repo
        if: steps.check.outputs.new_release == 'true' && steps.check.outputs.hash != ''
        run: |
          git commit --signoff -m "Update to ${{steps.generate.outputs.version}}" -m "${{steps.generate.outputs.version}}@${{steps.check.outputs.hash}}" .digest
        env:
          GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        id: cpr
        if: steps.check.outputs.new_release == 'true' && steps.check.outputs.hash != ''
        with:
          token: ${{ secrets.PAT }}
          branch: automated/launcher-update
          delete-branch: true
          title: Jagex Launcher ${{steps.generate.outputs.version}}
          body: ${{steps.generate.outputs.version}} @ ${{steps.check.outputs.hash}}
          labels: |
            update
            chore
            automated pr
            autorebase:opt-in

      - name: Automerge Pull Request
        if: steps.check.outputs.new_release == 'true' && steps.check.outputs.hash != '' && (steps.cpr.outputs.pull-request-operation == 'created' || steps.cpr.outputs.pull-request-operation == 'updated')
        run: gh pr merge --rebase --auto "$PR_NUMBER"
        env:
          GH_TOKEN: ${{ secrets.PAT }}
          PR_NUMBER: ${{ steps.cpr.outputs.pull-request-number }}
